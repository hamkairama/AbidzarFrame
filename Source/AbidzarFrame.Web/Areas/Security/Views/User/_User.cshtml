@model AbidzarFrame.Security.Interface.Dto.UserResult
@using AbidzarFrame.Utils;
@{
    Layout = null;
}

@Html.AntiForgeryToken()
@Html.Hidden("hiddenActionGrid", (object)ViewBag.ActionGrid)

<form id="FormObject">
    <fieldset>
        <div class="col-md-12">
            @{
                if ((object)ViewBag.ActionGrid == "Edit")
                {
                    <div class="row hidden">
                        <div class="form-group">
                            @*@Html.TextBoxFor(m => m.Id, new { @class = "form-control", @style = "width:100%", @maxlength = "50" })*@
                        </div>
                    </div>
                }
            }
            <div class="row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Nik)
                    @Html.DropDownListFor(m => m.Nik, new SelectList(ViewBag.KtpList, "Value", "Text"), "", new { @class = "selectpicker show-tick form-control" })
                    @Html.ValidationMessageFor(m => m.Nik, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Sandi)
                    @if ((string)ViewBag.ActionGrid == "Edit")
                    {
                        string newSandi = Cryptoghrap.DecryptString(Model.Sandi);
                        @Html.TextBoxFor(m => m.Sandi, new { @Value = newSandi, @class = "form-control", @style = "width:100%", @maxlength = "100" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Sandi, new { @class = "form-control", @style = "width:100%", @maxlength = "100" })
                    }
                    @Html.ValidationMessageFor(m => m.Sandi, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    @Html.LabelFor(m => m.Email)
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @style = "width:100%", @maxlength = "50" })
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                @if ((string)ViewBag.ActionGrid == "Edit")
                {
                    @Html.HiddenFor(m => m.IsMobile, new { @Value = Model.IsMobile })

                }
                else
                {
                    @Html.HiddenFor(m => m.IsMobile, new { @Value = "False" })
                }
                <div class="form-group form-md-radios">
                    <label>Menggunakan</label>
                    <div class="md-radio-inline">
                        <div class="md-radio">
                            <input onclick="SetIsMobile('False')" name="isMobilex" class="md-radiobtn" id="rbWeb" type="radio">
                            <label for="rbWeb">
                                <span class="inc"></span>
                                <span class="check"></span>
                                <span class="box"></span>
                                Web
                            </label>
                        </div>
                        <div class="md-radio has-warning">
                            <input onclick="SetIsMobile('True')" name="isMobilex" class="md-radiobtn" id="rbMobile" type="radio">
                            <label for="rbMobile">
                                <span></span>
                                <span class="check"></span>
                                <span class="box"></span>
                                Mobile
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group">
                    @Html.LabelFor(m => m.IdRole)
                    @Html.DropDownListFor(m => m.IdRole, new SelectList(ViewBag.RoleList, "Value", "Text"), "", new { @class = "selectpicker show-tick form-control" })
                    @Html.ValidationMessageFor(m => m.IdRole, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                @if ((string)ViewBag.ActionGrid == "Edit")
                {
                    @Html.HiddenFor(m => m.Status, new { @Value = Model.Status })

                }
                else
                {
                    @Html.HiddenFor(m => m.Status, new { @Value = "True" })
                }
                <div class="form-group form-md-radios">
                    <label>Status</label>
                    <div class="md-radio-inline">
                        <div class="md-radio has-success">
                            <input onclick="SetStatus('True')" name="statusx" class="md-radiobtn" id="rbActive" type="radio">
                            <label for="rbActive">
                                <span class="inc"></span>
                                <span class="check"></span>
                                <span class="box"></span>
                                Active
                            </label>
                        </div>
                        <div class="md-radio has-error">
                            <input onclick="SetStatus('False')" name="statusx" class="md-radiobtn" id="rbNonActive" type="radio">
                            <label for="rbNonActive">
                                <span></span>
                                <span class="check"></span>
                                <span class="box"></span>
                                Non Active
                            </label>
                        </div>
                    </div>
                </div>
            </div>

        </div>

    </fieldset>
</form>

<script>
    //Reference : https://silviomoreto.github.io/bootstrap-select/options/
    $('.selectpicker').selectpicker({
        liveSearch: true,
        size: 5,
        showSubtext: true
    });

    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)) {
        $('.selectpicker').selectpicker('mobile');
    }

    $(function () {
        var isMobile = $("#IsMobile").val();
        if (isMobile != null) {
            if ($("#IsMobile").val() == "True") {
                var state = document.getElementById("rbMobile");
                state.checked = true;
            } else {
                var state = document.getElementById("rbWeb");
                state.checked = true;
            }
        }

        var status = $("#Status").val();
        if (status != null) {
            if ($("#Status").val() == "True") {
                var state = document.getElementById("rbActive");
                state.checked = true;
            } else {
                var state = document.getElementById("rbNonActive");
                state.checked = true;
            }
        }
    })

    function SetIsMobile(values) {
        $("#IsMobile").val(values);
    }

    function SetStatus(values) {
        $("#Status").val(values);
    }
</script>